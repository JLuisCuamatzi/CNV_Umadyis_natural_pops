"""
@ script: 01_DownloadFastqFiles.py
@ author: jcuamatzi

# Usage:
    python 01_DownloadFastqFiles.py -i INPUT

This script takes as input a text file that contains the names of bash (.sh) scripts generated by the ENA browser for downloading FASTQ files. 
Each .sh file listed in the text file should contain `wget` commands to download the files.

The script checks if the FASTQ files already exist in the current directory and only downloads them if they are not present. 
This helps to avoid redundant downloads and saves bandwidth.

# Input:
    - A text file containing the list of .sh script files, one per line (e.g., `sh_files_list.txt`).
    - Each .sh script must contain `wget` commands generated by the ENA browser for downloading FASTQ files.

# Example text file (`sh_files_list.txt`):
    File1.sh
    File2.sh
    # More .sh files can be added here. The .sh file can be name as you wish.

# Output:
    - FASTQ files will be downloaded only if they do not already exist.
    - Skips downloading files that are already present in the current directory.

"""

## Load modules
import os
import subprocess
import argparse


## Functions
# Function to extract file names from wget commands
def get_fastq_filenames(sh_file):
    """
    Extracts FASTQ file names from a given .sh file containing wget commands.

    Args:
        sh_file (str): The path to the .sh file.

    Returns:
        list: A list of FASTQ file names extracted from the wget commands.
    """
    fastq_files = []
    with open(sh_file, 'r') as f:
        for line in f:
            if line.startswith('wget'):
                # Extract the file URL and get the file name from it
                file_url = line.split()[-1]
                file_name = file_url.split('/')[-1].strip()
                fastq_files.append(file_name)
    return fastq_files

# Function to check if the files already exist and download if they don't
def download_fastq_files(sh_file):
    """
    Checks whether FASTQ files from a .sh file exist locally and downloads them if they do not.

    Args:
        sh_file (str): The path to the .sh file containing wget commands.
    """
    fastq_files = get_fastq_filenames(sh_file)
    
    # Open the .sh file and read the lines
    with open(sh_file, 'r') as file:
        sh_lines = file.readlines()

    for file_name in fastq_files:
        if os.path.exists(file_name):
            print(f"{file_name} already exists. Skipping download.")
        else:
            print(f"Downloading {file_name}...")

            # Find the line that contains the wget command for this file
            for line in sh_lines:
                if file_name in line:
                    # Execute the wget command directly without grep
                    try:
                        subprocess.run(line.strip(), shell=True, check=True)
                    except subprocess.CalledProcessError as e:
                        print(f"Error while downloading {file_name}: {e}")
                    break

# Function to read the sh file names from a txt file
def process_sh_files(txt_file):
    """
    Reads a text file containing a list of .sh files and processes each one.

    Args:
        txt_file (str): The path to the text file containing the names of .sh files, one per line.

    This function reads each line from the text file, checks if the .sh file exists, 
    and processes it by calling `download_fastq_files`.
    """
    with open(txt_file, 'r') as f:
        for line in f:
            sh_file = line.strip()  # Read each .sh file from the txt file
            if os.path.exists(sh_file):
                print(f"Processing {sh_file}...")
                download_fastq_files(sh_file)
            else:
                print(f"{sh_file} not found, skipping.")


def main():
    parser = argparse.ArgumentParser(description="Script to download FASTQ files from ENA browser using bash scripts.The input file should contain the names of .sh files, each containing wget commands to download FASTQ files. The script checks if each file exists before downloading.")
    parser.add_argument('-i', '--input', required=True, help="Path to the input text file containing names of .sh files")
    args = parser.parse_args()
    # Run
    txt_file = args.input
    process_sh_files(txt_file)
    
if __name__ == "__main__":
    main()